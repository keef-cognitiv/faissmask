FROM debian:bullseye as build

ENV DEBIAN_FRONTEND teletype

ARG FAISS_VERSION=main
ARG FAISS_OPTIMIZATION=generic
ARG FAISS_DOTNET_ARCHITECTURE=noarch

RUN apt-get -y update && \
    apt-get -y install apt-utils

RUN apt-get -y update && \
    apt-get -y install wget gnupg2 libgomp1 software-properties-common patchelf

# install intel-mkl
RUN if [ "${FAISS_OPTIMIZATION}" = "avx2" ]; then cd /tmp && \
    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB && \
    cd / && \
    echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list && \
    apt-get -y update && \
    apt-get -y install intel-mkl-2020.1-102; else apt-get -y install libopenblas-pthread-dev; fi

# install latest cmake
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' && \
    apt update && apt install -y cmake

# install gcc-c++ make
RUN apt-get -y install build-essential

# build faiss and the c api
RUN apt-get -y install git && \
    git clone -b ${FAISS_VERSION} https://github.com/facebookresearch/faiss.git /faiss && \
    cd /faiss && \
    sed -i "s/faiss_c PRIVATE faiss/faiss_c PRIVATE faiss${FAISS_OPT_SUFFIX}/g" c_api/CMakeLists.txt && if [ "${FAISS_OPTIMIZATION}" = "avx2" ]; then export LD_LIBRARY_PATH=/opt/intel/mkl/lib/intel64:$LD_LIBRARY_PATH && \
    export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libgomp.so.1:/opt/intel/mkl/lib/intel64/libmkl_def.so:\
/opt/intel/mkl/lib/intel64/libmkl_avx2.so:/opt/intel/mkl/lib/intel64/libmkl_core.so:\
/opt/intel/mkl/lib/intel64/libmkl_intel_lp64.so:/opt/intel/mkl/lib/intel64/libmkl_gnu_thread.so && \
    export MKLROOT=/opt/intel/mkl; export FAISS_OPT_SUFFIX="_avx2"; else export FAISS_OPT_SUFFIX=""; fi && \
    cmake -DFAISS_ENABLE_GPU=OFF -DFAISS_ENABLE_PYTHON=OFF -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -DFAISS_ENABLE_C_API=ON -DBUILD_SHARED_LIBS=ON -DFAISS_OPT_LEVEL="${FAISS_OPTIMIZATION}" -B build . && \
    find /usr/lib -name 'libgomp*' && find /usr/lib -name 'libopenblas*' && \
    make -C build -j $(nproc) "faiss${FAISS_OPT_SUFFIX}" install

RUN mkdir -p /tmp/faiss-build-output/lib && cp /faiss/build/faiss/libfaiss*.so /faiss/build/c_api/libfaiss_c.so /usr/lib/*-linux-gnu/libgomp.so.1 /usr/lib/*-linux-gnu/libopenblas.so.0 /tmp/faiss-build-output/lib/ && if [ "${FAISS_OPTIMIZATION}" = "avx2" ]; then patchelf --set-soname libmkl_def.so /opt/intel/mkl/lib/intel64/libmkl_def.so && patchelf --set-soname libmkl_avx2.so /opt/intel/mkl/lib/intel64/libmkl_avx2.so && patchelf --set-soname libmkl_core.so /opt/intel/mkl/lib/intel64/libmkl_core.so && patchelf --set-soname libmkl_intel_lp64.so /opt/intel/mkl/lib/intel64/libmkl_intel_lp64.so && patchelf --set-soname libmkl_gnu_thread.so /opt/intel/mkl/lib/intel64/libmkl_gnu_thread.so && patchelf --set-soname libmkl_sequential.so /opt/intel/mkl/lib/intel64/libmkl_sequential.so && cp /opt/intel/mkl/lib/intel64/libmkl_def.so /opt/intel/mkl/lib/intel64/libmkl_avx2.so /opt/intel/mkl/lib/intel64/libmkl_core.so /opt/intel/mkl/lib/intel64/libmkl_intel_lp64.so /opt/intel/mkl/lib/intel64/libmkl_gnu_thread.so /opt/intel/mkl/lib/intel64/libmkl_sequential.so /tmp/faiss-build-output/lib/; fi

FROM mcr.microsoft.com/dotnet/sdk:6.0

ARG FAISS_DOTNET_ARCHITECTURE=noarch

EXPOSE 80

ADD . /src
WORKDIR /src

RUN rm -f /src/FaissMask/runtimes/linux-${FAISS_DOTNET_ARCHITECTURE}/native/*
COPY --from=build  /tmp/faiss-build-output/lib/* /src/FaissMask/runtimes/linux-${FAISS_DOTNET_ARCHITECTURE}/native/

RUN echo "Copied into /src/FaissMask/runtimes/linux-${FAISS_DOTNET_ARCHITECTURE}/native/:" && ls -al "/src/FaissMask/runtimes/linux-${FAISS_DOTNET_ARCHITECTURE}/native/"
RUN echo "/src/FaissMask/runtimes/linux-${FAISS_DOTNET_ARCHITECTURE}/native/" > /etc/ld.so.conf.d/faissmask.conf && ldconfig

CMD ["dotnet", "test", "FaissMask.Test"]
